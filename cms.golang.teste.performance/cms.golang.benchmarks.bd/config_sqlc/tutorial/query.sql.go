// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package tutorial

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clear = `-- name: Clear :exec
DELETE FROM "TbPerson"
WHERE name like 'SqlC%'
`

func (q *Queries) Clear(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clear)
	return err
}

const create = `-- name: Create :one
INSERT INTO "TbPerson" (
  id, name, created_at
) VALUES (
  $1, $2, $3
)
RETURNING id, name, created_at
`

type CreateParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (TbPerson, error) {
	row := q.db.QueryRow(ctx, create, arg.ID, arg.Name, arg.CreatedAt)
	var i TbPerson
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM "TbPerson"
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name, created_at FROM "TbPerson"
ORDER BY created_at
`

func (q *Queries) GetAll(ctx context.Context) ([]TbPerson, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPerson
	for rows.Next() {
		var i TbPerson
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
SELECT id, name, created_at FROM "TbPerson"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (TbPerson, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i TbPerson
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const update = `-- name: Update :exec
UPDATE "TbPerson"
  set name = $2
WHERE id = $1
`

type UpdateParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update, arg.ID, arg.Name)
	return err
}
