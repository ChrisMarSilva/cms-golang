services:
  backend-1: &backend
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    container_name: backend-1
    hostname: backend-1
    restart: unless-stopped
    expose:
      - "8080"
    environment:
      - LISTEN_ADDR=release
      - URI_PORT=8080
      - REDIS_ADDR=redis:6379
      - REDIS_PWD=123
      - RABBIT_MQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBIT_MQ_DEFAULT_QUEUE=queue.person
      - NAME_API=111
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  backend-2:
    <<: *backend
    container_name: backend-2
    hostname: backend-2
    environment:
      - LISTEN_ADDR=release
      - URI_PORT=8080
      - REDIS_ADDR=redis:6379
      - REDIS_PWD=123
      - RABBIT_MQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBIT_MQ_DEFAULT_QUEUE=queue.person
      - NAME_API=222

  worker-1: &worker
    build:
      context: .
      dockerfile: ./cmd/worker/Dockerfile
    container_name: worker-1
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PWD=123
      - RABBIT_MQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBIT_MQ_DEFAULT_QUEUE=queue.person
      - NUM_WORKERS=1000
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker-2:
    <<: *worker
    container_name: worker-2
    hostname: worker-2
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PWD=123
      - RABBIT_MQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBIT_MQ_DEFAULT_QUEUE=queue.person
      - NUM_WORKERS=1000

  redis:
    image: redis:8.2.0-alpine
    container_name: redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --appendonly no --maxclients 20000 --maxmemory 32mb --maxmemory-policy allkeys-lru --loglevel warning
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 5s # Optional: Time to wait before starting health checks

  rabbitmq:
    image: rabbitmq:4.1.3-management
    container_name: rabbitmq
    hostname: rabbitmq
    command: rabbitmq-server
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"] # Checks if RabbitMQ ports are reachable
      interval: 10s # How often to run the health check
      timeout: 5s # Maximum time allowed for the health check command to complete
      retries: 5 # Number of consecutive failures before the container is marked unhealthy
      start_period: 30s # Time to wait for RabbitMQ to start before performing the first health check
    networks:
      - backend

  nginx:
    image: nginx:1.29.0-alpine
    container_name: nginx
    hostname: nginx
    ports:
      - 9999:9999
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    depends_on: ["backend-1", "backend-2"]

networks:
  backend:
    driver: bridge
