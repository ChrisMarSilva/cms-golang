# To get the latest released Go client:
go get github.com/nats-io/nats.go@latest

docker run -p 4222:4222 -ti nats:latest












import "github.com/nats-io/nats.go"

// Connect to a server
nc, _ := nats.Connect(nats.DefaultURL)

// Simple Publisher
nc.Publish("foo", []byte("Hello World"))

// Simple Async Subscriber
nc.Subscribe("foo", func(m *nats.Msg) {
    fmt.Printf("Received a message: %s\n", string(m.Data))
})

// Responding to a request message
nc.Subscribe("request", func(m *nats.Msg) {
    m.Respond([]byte("answer is 42"))
})

// Simple Sync Subscriber
sub, err := nc.SubscribeSync("foo")
m, err := sub.NextMsg(timeout)

// Channel Subscriber
ch := make(chan *nats.Msg, 64)
sub, err := nc.ChanSubscribe("foo", ch)
msg := <- ch

// Unsubscribe
sub.Unsubscribe()

// Drain
sub.Drain()

// Requests
msg, err := nc.Request("help", []byte("help me"), 10*time.Millisecond)

// Replies
nc.Subscribe("help", func(m *nats.Msg) {
    nc.Publish(m.Reply, []byte("I can help!"))
})

// Drain connection (Preferred for responders)
// Close() not needed if this is called.
nc.Drain()

// Close connection
nc.Close()

package event

type Event struct {
	ID  string `json:"id"`
	Msg string `json:"msg"`
}


package main

import (
	"encoding/json"
	"log"
	"tests/nats/event"
	"time"

	"github.com/google/uuid"
	"github.com/nats-io/nats.go"
)

func main() {
	// connect to NATS Server
	conn, err := nats.Connect(nats.DefaultURL)
	if err != nil {
		log.Fatal("Failed to connect to NATS", err)
	}

	log.Println("Connected to NATS at " + nats.DefaultURL)

	// repeat every 2 seconds
	for range time.Tick(2 * time.Second) {
		ev := event.Event{
			ID:  uuid.New().String(),
			Msg: "Hello, Subscriber!",
		}

		// marshal the event to JSON
		b, err := json.Marshal(ev)
		if err != nil {
			log.Println("Failed to marshal data", err)
			return
		}

		err = conn.Publish("event", b)
		if err != nil {
			log.Println("Failed to publish event", err)
			return
		}

		log.Println("Event published", string(b))
	}
}
view rawpublisher.go 



package main

import (
	"encoding/json"
	"log"
	"runtime"
	"tests/nats/event"

	"github.com/nats-io/nats.go"
)

func main() {
	// connect to NATS Server
	conn, err := nats.Connect(nats.DefaultURL)
	if err != nil {
		log.Fatal("Failed to connect to NATS", err)
	}

	log.Println("Connected to NATS at " + nats.DefaultURL)

	conn.Subscribe("event", func(msg *nats.Msg) {
		var ev event.Event

		err := json.Unmarshal(msg.Data, &ev)
		if err != nil {
			log.Println("Failed to unmarshal event", err)
			return
		}

		log.Println("Event received", ev)
	})

	log.Println("Listening on event topic")

	runtime.Goexit()
}
view rawsubscriber.go hosted with ❤ by GitHub



docker run -p 4222:4222 -ti nats-streaming:latest -st FILE --dir /data/stan
go get github.com/nats-io/stan.go



https://medium.com/unicoidtech/construindo-servi%C3%A7os-ass%C3%ADncronos-em-go-com-o-nats-794523ca502f