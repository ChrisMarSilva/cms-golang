package utils

import "time"

func IsWithInRange(checked, from, to time.Time) bool {
	return (checked.Equal(from) || checked.After(from)) && (checked.Equal(to) || checked.Before(to))
}


/pkg/utils
/env.go

package utils

import "os"

func GetEnvOrSetDefault(key string, defaultVal string) string {
	if os.Getenv(key) == "" {
		os.Setenv(key, defaultVal)
		return defaultVal
	}

	return os.Getenv(key)
}

workers := 5000
	slowQueue := make(chan internal.PaymentRequestProcessor, 5000)

	redisAddr := utils.GetEnvOrSetDefault("REDIS_ADDR", "localhost:6379")
	rdb := redis.NewClient(&redis.Options{
		Addr:     redisAddr,
		Password: "",
		DB:       0,
	})
	if err := rdb.Ping(context.Background()).Err(); err != nil {
		panic("failed to connect to redis")
	}
	
	func sonicMarshal(v any) ([]byte, error) {
	return sonic.Marshal(v)
}

func sonicUnmarshal(data []byte, v any) error {
	return sonic.Unmarshal(data, v)
}



var err error
	if !a.healthStatus.Default.Failing && a.healthStatus.Default.MinResponseTime < 100 {
		err = a.sendPayment(
			payment,
			a.defaultUrl+"/payments",
			time.Second*10,
			PaymentEndpointDefault,
		)
	} else if !a.healthStatus.Fallback.Failing && a.healthStatus.Fallback.MinResponseTime < 100 {
		err = a.sendPayment(
			payment,
			a.fallbackUrl+"/payments",
			time.Second*10,
			PaymentEndpointFallback,
		)
	} else {
		return ErrUnavailableProcessor
	}



req, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewReader(reqBody))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Connection", "keep-alive")

	res, err := a.client.Do(req)
	slog.Debug("response from api", "url", url, "res", res, "payment", payment)

	if res != nil && res.StatusCode == 422 {
		return nil
	}

	if res != nil && (res.StatusCode >= 500 ||
		res.StatusCode == 429 ||
		res.StatusCode == 408) {
		return ErrUnavailableProcessor
	}

	if errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {
		return ErrUnavailableProcessor
	}



func (a *PaymentProcessorAdapter) EnableHealthCheck(should string) {
	if should != "true" {
		return
	}

	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()

		for range ticker.C {
			resDefault, err := a.healthCheckEndpoint(a.defaultUrl + "/payments/service-health")
			if err != nil {
				continue
			}
			resFallback, err := a.healthCheckEndpoint(a.fallbackUrl + "/payments/service-health")
			if err != nil {
				continue
			}

			reqbody := HealthCheckStatus{
				resDefault,
				resFallback,
			}
			rawBody, err := sonic.Marshal(reqbody)
			if err != nil {
				slog.Debug("failed to encode the json object for redis", "err", err)
				continue
			}
			if a.db.Set(context.Background(), HealthCheckKey, rawBody, 0).Err() != nil {
				slog.Debug("failed to save health check in redis")
				continue
			}

			slog.Debug("updating the", "healthCheckStatus", reqbody)
		}
	}()
}

func (a *PaymentProcessorAdapter) healthCheckEndpoint(url string) (HealthCheckResponse, error) {
	res, err := a.client.Get(url)
	if res == nil || err != nil || res.StatusCode != 200 {
		slog.Error("failed to health check", "url", url)
		return HealthCheckResponse{}, err
	}

	var respBody HealthCheckResponse
	decoder := sonic.ConfigFastest.NewDecoder(res.Body)
	if err := decoder.Decode(&respBody); err != nil {
		slog.Error("failed to parse the response", "url", url)
		return HealthCheckResponse{}, err
	}

	return respBody, nil
}



func (a *PaymentProcessorAdapter) StartWorkers() {
	for range a.workers {
		go a.retryWorkers()
	}

	go func() {
		for {
			slog.Debug("Status of queue", "lenRetryQueue", len(a.retryQueue))
			time.Sleep(3 * time.Second)
		}
	}()

	go func() {
		ticker := time.NewTicker(time.Second * 5)
		defer ticker.Stop()

		for range ticker.C {
			res := a.db.Get(context.Background(), HealthCheckKey)
			if res.Err() != nil {
				slog.Debug("failed update the health check", "err", res.Err())
				continue
			}

			resBody, err := res.Result()
			if err != nil {
				slog.Debug("failed update the health check", "err", res.Err())
				continue

			}

			var healthCheckStatus *HealthCheckStatus
			if err := sonic.ConfigFastest.Unmarshal([]byte(resBody), &healthCheckStatus); err != nil {
				slog.Debug("failed update the health check", "err", err)
				continue
			}

			a.mu.Lock()
			a.healthStatus = healthCheckStatus
			a.mu.Unlock()
		}
	}()
}

func (a *PaymentProcessorAdapter) retryWorkers() {
	for payment := range a.retryQueue {
		time.Sleep(time.Millisecond * 500)
		a.Process(payment)
	}
}