

package core

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/google/uuid"
)

type PaymentRequest struct {
	CorrelationID string  `json:"correlationId"`
	Amount        float64 `json:"amount"`
	RequestedAt   string  `json:"requestedAt"` // ISO string
}

var (
	ErrInvalidUUID   = errors.New("invalid UUID")
	ErrInvalidAmount = errors.New("amount must be greater than 0")
	ErrInvalidBody   = errors.New("invalid JSON body")
)

func ParseAndValidatePayment(body []byte) (*PaymentRequest, error) {
	var req PaymentRequest
	if err := json.Unmarshal(body, &req); err != nil {
		return nil, ErrInvalidBody
	}

	if _, err := uuid.Parse(req.CorrelationID); err != nil {
		return nil, ErrInvalidUUID
	}

	if req.Amount <= 0 {
		return nil, ErrInvalidAmount
	}

	req.RequestedAt = time.Now().UTC().Format(time.RFC3339Nano)

	return &req, nil
}




func (pc *PaymentClient) send(url string, p *core.PaymentRequest) error {
	body, _ := json.Marshal(p)
	resp, err := pc.http.Post(url, "application/json", bytes.NewReader(body))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return fmt.Errorf("client error: %d", resp.StatusCode)
	}

	io.Copy(io.Discard, resp.Body)
	return nil
}

func (pc *PaymentClient) checkDefaultHealth() bool {
	pc.healthMu.Lock()
	defer pc.healthMu.Unlock()

	now := time.Now()
	if now.Before(pc.lastCheck.Add(pc.retryDelay)) {
		return pc.defaultUp
	}

	resp, err := pc.http.Get(pc.defaultURL + "/payments/service-health")
	pc.lastCheck = now

	if err != nil {
		pc.defaultUp = false
		pc.retryDelay = 5 * time.Second // Default fallback
		return false
	}
	defer resp.Body.Close()

	if resp.StatusCode == 429 {
		pc.defaultUp = false
		retryAfter := resp.Header.Get("Retry-After")
		if sec, err := strconv.Atoi(retryAfter); err == nil {
			pc.retryDelay = time.Duration(sec) * time.Second
		} else {
			pc.retryDelay = 5 * time.Second
		}
		return false
	}

	if resp.StatusCode != 200 {
		pc.defaultUp = false
		pc.retryDelay = 5 * time.Second
		return false
	}

	var res struct {
		Failing bool `json:"failing"`
	}
	_ = json.NewDecoder(resp.Body).Decode(&res)

	pc.defaultUp = !res.Failing
	pc.retryDelay = 5 * time.Second
	return pc.defaultUp
}


package api

import (
	"fmt"
	"gorinha-2025/internal/client"
	"gorinha-2025/internal/config"
	"gorinha-2025/internal/core"
	"gorinha-2025/internal/store"
	"gorinha-2025/internal/worker"
	"strconv"
	"time"

	"github.com/valyala/fasthttp"
)

type Router struct {
	pool *worker.WorkerPool
}

func NewRouter() *Router {
	defaultURL := config.GetEnv("PAYMENT_PROCESSOR_URL_DEFAULT", "http://localhost:8001")
	fallbackURL := config.GetEnv("PAYMENT_PROCESSOR_URL_FALLBACK", "http://localhost:8002")
	workers, _ := strconv.Atoi(config.GetEnv("WORKERS", "8"))

	fmt.Println("Default Processor URL: ", defaultURL)
	fmt.Println("Fallback Processor URL:", fallbackURL)

	client := client.NewPaymentClient(defaultURL, fallbackURL)
	pool := worker.NewWorkerPool(workers, client)
	pool.Start()

	return &Router{
		pool: pool,
	}
}

func (r *Router) HandleRequest(ctx *fasthttp.RequestCtx) {
	switch string(ctx.Path()) {
	case "/payments":
		if ctx.IsPost() {
			r.handlePostPayments(ctx)
			return
		}
	case "/payments-summary":
		if ctx.IsGet() {
			r.handleGetPaymentsSummary(ctx)
			return
		}
	}

	ctx.SetStatusCode(fasthttp.StatusNotFound)
	ctx.SetBodyString("404 - Not Found")
}

func (r *Router) handlePostPayments(ctx *fasthttp.RequestCtx) {
	body := ctx.PostBody()
	payment, err := core.ParseAndValidatePayment(body)

	if err != nil {
		ctx.SetStatusCode(fasthttp.StatusBadRequest)
		ctx.SetBodyString(err.Error())
		return
	}

	success := r.pool.Enqueue(payment)

	if success {
		ctx.SetStatusCode(fasthttp.StatusAccepted)
		ctx.SetContentType("application/json")
		ctx.SetBodyString(`{"status":"accepted"}`)
	} else {
		ctx.SetStatusCode(fasthttp.StatusServiceUnavailable)
		ctx.SetContentType("application/json")
		ctx.SetBodyString(`{"error":"queue full"}`)
	}
}

func (r *Router) handleGetPaymentsSummary(ctx *fasthttp.RequestCtx) {
	fromStr := string(ctx.QueryArgs().Peek("from"))
	toStr := string(ctx.QueryArgs().Peek("to"))

	var from, to *time.Time

	if fromStr != "" {
		if t, err := time.Parse(time.RFC3339Nano, fromStr); err == nil {
			from = &t
		}
	}
	if toStr != "" {
		if t, err := time.Parse(time.RFC3339Nano, toStr); err == nil {
			to = &t
		}
	}

	def := store.SummaryFromFile("default", from, to)
	fbk := store.SummaryFromFile("fallback", from, to)

	body := fmt.Sprintf(
		`{"default":{"totalRequests":%d,"totalAmount":%.2f},"fallback":{"totalRequests":%d,"totalAmount":%.2f}}`,
		def.TotalRequests, def.TotalAmount, fbk.TotalRequests, fbk.TotalAmount,
	)

	ctx.SetStatusCode(fasthttp.StatusOK)
	ctx.SetContentType("application/json")
	ctx.SetBodyString(body)
}