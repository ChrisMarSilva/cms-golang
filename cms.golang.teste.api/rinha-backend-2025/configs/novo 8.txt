currentTime := time.Now().UTC()
	formattedString := currentTime.Format(time.RFC3339Nano)
	paymentRequest.RequestedAt = formattedString
	jsonBody, err := json.Marshal(paymentRequest)
	if err != nil {
		log.Printf("ERROR ON MARSHAL TO JSON: %v", err)
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	if err := database.RedisClient.LPush(database.RedisCtx, config.RedisQueueKey, jsonBody).Err(); err != nil {
		log.Printf("ERROR ON PUSH TO REDIS QUEUE: %v", err)
		return c.SendStatus(fiber.StatusInternalServerError)
	}




func GetPaymentsSummary(c *fiber.Ctx) (err error) {

	fromStr := c.Query("from")
	toStr := c.Query("to")
	from, to, err := parseTimeRange(fromStr, toStr)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return
	}
	paymentsData, err := database.RedisClient.HGetAll(database.RedisCtx, config.RedisPaymentsKey).Result()
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return
	}

	resp := summarizePayments(paymentsData, from, to)

	return c.Status(fiber.StatusOK).JSON(resp)
}


func parseTimeRange(fromStr string, toStr string) (from, to time.Time, err error) {

	if fromStr == "" && toStr == "" {
		return
	}
	if fromStr == "" || toStr == "" {
		return
	}
	from, err = dateparse.ParseAny(fromStr)
	if err != nil {
		return
	}
	to, err = dateparse.ParseAny(toStr)
	if err != nil {
		return
	}
	return
}


package database

import (
	"context"

	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/config"
	"github.com/redis/go-redis/v9"
)

var RedisClient *redis.Client
var RedisCtx = context.Background()

func ConnectRedis() error {
	RedisClient = redis.NewClient(&redis.Options{
		Addr: config.CacheURL,
	})
	return nil
}


package background

import (
	"encoding/json"
	"log"
	"sync"
	"time"

	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/config"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/types"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/utils"
	"github.com/gofiber/fiber/v2"
)

var HealthCache = types.HealthStatusCache{
	Status:                  make(fiber.Map),
	BestPaymentProcessorUrl: config.PaymentProcessorUrlDefault,
	Err:                     nil,
}

func RunHealthCheckWorker() {
	log.Println("Health check worker started...")
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for ; ; <-ticker.C {
		log.Println("Worker: Running health checks...")

		newStatus, err := fetchAndProcessHealthChecks()
		if err != nil {
			log.Printf("Worker: Error fetching health checks: %v", err)
			HealthCache.Err = err
			continue
		}

		HealthCache.Mu.Lock()
		HealthCache.Status = newStatus
		HealthCache.BestPaymentProcessorUrl, HealthCache.Err = decideBestProcessor(newStatus)
		HealthCache.Mu.Unlock()

		log.Println("Worker: Health status cache updated successfully.")
	}
}

func decideBestProcessor(m fiber.Map) (string, error) {
	var payload types.HealthStatusPayload

	jsonBytes, err := json.Marshal(m)
	if err != nil {
		log.Printf("Error converting health status map to JSON: %v", err)
		return config.PaymentProcessorUrlDefault, err
	}

	if err := json.Unmarshal(jsonBytes, &payload); err != nil {
		log.Printf("Error parsing health status structure: %v", err)
		return config.PaymentProcessorUrlDefault, err
	}

	if payload.Default.IsFailing && payload.Fallback.IsFailing {
		log.Println("CRITICAL: Both default and fallback payment processors are failing.")
		return config.PaymentProcessorUrlDefault, utils.ErrAllPaymentsFailing
	}

	if payload.Default.IsFailing || payload.Default.MinResponseTime > payload.Fallback.MinResponseTime+50 {
		return config.PaymentProcessorUrlFallback, nil
	}
	return config.PaymentProcessorUrlDefault, nil
}
func fetchAndProcessHealthChecks() (fiber.Map, error) {
	var wg sync.WaitGroup
	defaultChan := make(chan types.HealthResult, 1)
	fallbackChan := make(chan types.HealthResult, 1)

	wg.Add(2)
	go fetchHealth(config.PaymentProcessorUrlDefault+"/payments/service-health", &wg, defaultChan)
	go fetchHealth(config.PaymentProcessorUrlFallback+"/payments/service-health", &wg, fallbackChan)

	wg.Wait()
	close(defaultChan)
	close(fallbackChan)

	defaultResult := <-defaultChan
	fallbackResult := <-fallbackChan

	if defaultResult.Err != nil {
		return nil, defaultResult.Err
	}
	if fallbackResult.Err != nil {
		return nil, fallbackResult.Err
	}

	response := fiber.Map{
		"default":          defaultResult.Response,
		"fallback":         fallbackResult.Response,
		"last_checked_utc": time.Now().UTC(),
	}

	return response, nil
}
func fetchHealth(url string, wg *sync.WaitGroup, ch chan<- types.HealthResult) {
	defer wg.Done()
	agent := fiber.Get(url)
	_, body, errs := agent.Bytes()
	if len(errs) > 0 {
		ch <- types.HealthResult{Err: errs[0]}
		return
	}
	var res fiber.Map
	if err := json.Unmarshal(body, &res); err != nil {
		ch <- types.HealthResult{Err: err}
		return
	}
	ch <- types.HealthResult{Response: res}
}



package background

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/config"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/database"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/types"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/utils"
	"github.com/gofiber/fiber/v2"
)

func ProccessPayments(paymentRequest types.PaymentRequest) (err error) {
	requestBody, err := json.Marshal(paymentRequest)
	if err != nil {
		return err
	}
	paymentProcessorUsed := HealthCache.BestPaymentProcessorUrl
	agent := fiber.Post(paymentProcessorUsed + "/payments")
	agent.Set(fiber.HeaderContentType, fiber.MIMEApplicationJSON)
	agent.Body(requestBody)
	statusCode, _, errs := agent.Bytes()
	if errs != nil {
		log.Printf("Error calling payment processor: %v", errs)
		return errs[0]
	}
	if statusCode < 200 || statusCode >= 300 {
		return utils.ErrFailedToSendPaymentProcess
	}
	processedPayment := types.ProcessedPayment{
		CorrelationID:    paymentRequest.CorrelationId,
		Amount:           paymentRequest.Amount,
		PaymentProcessor: paymentProcessorUsed,
		RequestedAt:      paymentRequest.RequestedAt,
	}

	paymentData, err := json.Marshal(processedPayment)
	if err != nil {
		return fmt.Errorf("failed to marshal payment data: %w", err)
	}
	err = database.RedisClient.HSet(database.RedisCtx, config.RedisPaymentsKey, processedPayment.CorrelationID, paymentData).Err()
	if err != nil {
		return fmt.Errorf("failed to save payment in redis: %w", err)
	}
	log.Println("PAYMENT SAVED ON REDIS")
	return nil
}


package background

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/config"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/database"
	"github.com/JoaoReisA/rinha-de-backend-2025-go/internal/types"
)

func StartWorker() {
	workerID := os.Getenv("INSTANCE_ID")
	if workerID == "" {
		workerID = fmt.Sprintf("worker-%d", time.Now().UnixNano())
	}
	processingQueue := "payments_processing:" + workerID

	concurrency := 16

	for i := 0; i < concurrency; i++ {
		go func(workerNum int) {
			for {
				res, err := database.RedisClient.RPopLPush(context.Background(), config.RedisQueueKey, processingQueue).Result()
				if err != nil {
					if err.Error() != "redis: nil" {
						fmt.Println("Error moving payment to processing queue:", err)
					}
					time.Sleep(100 * time.Millisecond)
					continue
				}

				var payment types.PaymentRequest

				if err := json.Unmarshal([]byte(res), &payment); err != nil {
					fmt.Printf("[Worker %s-%d] Failed to unmarshal payment: %v\n", workerID, workerNum, err)
					continue
				}

				if err := ProccessPayments(payment); err != nil {
					database.RedisClient.LPush(database.RedisCtx, "payments_pending", res)
				} else {
					fmt.Printf("[Worker %s-%d] Payment processed: %s\n", workerID, workerNum, payment.CorrelationId)
				}
			}
		}(i)
	}
}



slog.SetLogLoggerLevel(slog.LevelInfo)

	client := &http.Client{
		Transport: &http.Transport{
			MaxIdleConns:        512,
			MaxIdleConnsPerHost: 128,
			IdleConnTimeout:     120 * time.Second,
			MaxConnsPerHost:     512,
			DialContext: (&net.Dialer{
				Timeout:   time.Second,
				KeepAlive: 30 * time.Second,
			}).DialContext,
		},
		Timeout: 5 * time.Second,
	}

	rdb := redis.NewClient(&redis.Options{
		Addr: utils.GetEnvOrDefault("REDIS_ADDR", "localhost:6379"),
	})

	if err := rdb.Ping(context.Background()).Err(); err != nil {
		slog.Error("Redis failed", "err", err)
		os.Exit(1)
	}

	retryQueue := make(chan model.PaymentRequestProcessor, 5000)
	adapter := adapter.NewPaymentProcessorAdapter(
		client,
		rdb,
		utils.GetEnvOrDefault("PAYMENT_PROCESSOR_URL_DEFAULT", "http://localhost:8001"),
		utils.GetEnvOrDefault("PAYMENT_PROCESSOR_URL_FALLBACK", "http://localhost:8002"),
		retryQueue,
		500,
	)




package adapter

import (
	"bytes"
	"context"
	"errors"
	"net/http"
	"sync"
	"time"

	"rinha/model"

	"log/slog"

	"github.com/bytedance/sonic"
	"github.com/redis/go-redis/v9"
)

type PaymentProcessorAdapter struct {
	client       *http.Client
	db           *redis.Client
	healthStatus *model.HealthCheckStatus
	mu           sync.RWMutex
	defaultUrl   string
	fallbackUrl  string
	retryQueue   chan model.PaymentRequestProcessor
	workers      int
}

func NewPaymentProcessorAdapter(client *http.Client, db *redis.Client, defaultUrl, fallbackUrl string, retryQueue chan model.PaymentRequestProcessor, workers int) *PaymentProcessorAdapter {
	return &PaymentProcessorAdapter{
		client: client,
		db:     db,
		healthStatus: &model.HealthCheckStatus{
			Default:  model.HealthCheckResponse{},
			Fallback: model.HealthCheckResponse{},
		},
		defaultUrl:  defaultUrl,
		fallbackUrl: fallbackUrl,
		retryQueue:  retryQueue,
		workers:     workers,
	}
}

func (a *PaymentProcessorAdapter) Process(payment model.PaymentRequestProcessor) {
	ctx := context.Background()
	key := "correlation:" + payment.CorrelationId

	set, err := a.db.SetNX(ctx, key, "1", 1*time.Minute).Result()
	if err != nil {
		slog.Warn("Redis error", "err", err)
	} else if !set {
		slog.Debug("Duplicate correlationId, skipping", "correlationId", payment.CorrelationId)
		return
	}

	err = a.innerProcess(payment)
	if err != nil {
		if errors.Is(err, model.ErrInvalidRequest) {
			return
		}
		select {
		case a.retryQueue <- payment:
		default:
			slog.Warn("Retry queue full, discarding", "correlationId", payment.CorrelationId)
		}
	}
}

func (a *PaymentProcessorAdapter) innerProcess(payment model.PaymentRequestProcessor) error {
	a.mu.RLock()
	defer a.mu.RUnlock()

	if !a.healthStatus.Default.Failing && a.healthStatus.Default.MinResponseTime < 300 {
		if err := a.sendPayment(payment, a.defaultUrl+"/payments", 200*time.Millisecond); err == nil {
			return nil
		}
	}
	if !a.healthStatus.Fallback.Failing && a.healthStatus.Fallback.MinResponseTime < 100 {
		if err := a.sendPayment(payment, a.fallbackUrl+"/payments", 100*time.Millisecond); err == nil {
			return nil
		}
	}

	return model.ErrUnavailableProcessor
}

func (a *PaymentProcessorAdapter) sendPayment(payment model.PaymentRequestProcessor, url string, timeout time.Duration) error {
	payment.UpdateRequestTime()
	body, err := sonic.ConfigFastest.Marshal(payment)
	payment.Body = body

	if err != nil {
		return err
	}

	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewReader(body))
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")

	res, err := a.client.Do(req)
	if err != nil {
		if errors.Is(err, context.DeadlineExceeded) {
			return model.ErrUnavailableProcessor
		}
		return err
	}
	defer res.Body.Close()

	switch res.StatusCode {
	case 422:
		return model.ErrInvalidRequest
	case 429, 500, 502, 503, 504, 408:
		return model.ErrUnavailableProcessor
	}

	return nil
}

func (a *PaymentProcessorAdapter) Summary(from, to, token string) (model.SummaryResponse, error) {
	def, err := a.getSummary(a.defaultUrl+"/admin/payments-summary", from, to, token)
	if err != nil {
		return model.SummaryResponse{}, err
	}
	fallb, err := a.getSummary(a.fallbackUrl+"/admin/payments-summary", from, to, token)
	if err != nil {
		return model.SummaryResponse{}, err
	}
	return model.SummaryResponse{DefaultSummary: def, FallbackSummary: fallb}, nil
}

func (a *PaymentProcessorAdapter) getSummary(url, from, to, token string) (model.SummaryTotalRequestsResponse, error) {
	reqUrl := url + "?from=" + from + "&to=" + to
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	req, _ := http.NewRequestWithContext(ctx, http.MethodGet, reqUrl, nil)
	req.Header.Set("X-Rinha-Token", token)

	res, err := a.client.Do(req)
	if err != nil {
		return model.SummaryTotalRequestsResponse{}, err
	}
	defer res.Body.Close()

	var out model.SummaryTotalRequestsResponse
	err = sonic.ConfigFastest.NewDecoder(res.Body).Decode(&out)
	return out, err
}

func (a *PaymentProcessorAdapter) Purge(token string) error {
	for _, url := range []string{a.defaultUrl, a.fallbackUrl} {
		req, _ := http.NewRequest(http.MethodPost, url+"/admin/purge-payments", nil)
		req.Header.Set("X-Rinha-Token", token)
		res, err := a.client.Do(req)
		if err != nil || res.StatusCode != 200 {
			return model.ErrInvalidRequest
		}
		res.Body.Close()
	}
	return nil
}

func (a *PaymentProcessorAdapter) EnableHealthCheck(should string) {
	if should != "true" {
		return
	}

	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()

		for range ticker.C {
			def, _ := a.healthCheck(a.defaultUrl + "/payments/service-health")
			fall, _ := a.healthCheck(a.fallbackUrl + "/payments/service-health")

			status := &model.HealthCheckStatus{Default: def, Fallback: fall}
			a.mu.Lock()
			a.healthStatus = status
			a.mu.Unlock()

			raw, _ := sonic.Marshal(status)
			a.db.Set(context.Background(), model.HealthCheckKey, raw, 30*time.Second)
		}
	}()
}

func (a *PaymentProcessorAdapter) healthCheck(url string) (model.HealthCheckResponse, error) {
	res, err := a.client.Get(url)
	if err != nil || res.StatusCode != 200 {
		return model.HealthCheckResponse{Failing: true, MinResponseTime: 9999}, err
	}
	defer res.Body.Close()

	var hc model.HealthCheckResponse
	_ = sonic.ConfigFastest.NewDecoder(res.Body).Decode(&hc)
	return hc, nil
}

func (a *PaymentProcessorAdapter) StartWorkers() {
	for i := 0; i < a.workers; i++ {
		go func() {
			for p := range a.retryQueue {
				time.Sleep(500 * time.Millisecond)
				a.Process(p)
			}
		}()
	}
}
