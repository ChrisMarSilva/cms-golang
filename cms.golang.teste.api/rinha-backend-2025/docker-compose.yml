#version: "3.8"

services:
  backend-1: &backend
    build: .
    container_name: backend-1
    hostname: backend-1
    restart: unless-stopped
    stop_grace_period: 20s
    expose:
      - "8080"
    networks:
      - backend
      - payment-processor
    environment:
      - LISTEN_ADDR=release
      - URI_PORT=8080
      - REDIS_ADDR=redis:6379
      - REDIS_PWD=123
      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
      - NUM_WORKERS=20
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "100MB"

  backend-2:
    <<: *backend
    container_name: backend-2
    hostname: backend-2

  redis:
    image: redis:8.0.3-alpine
    container_name: redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --appendonly no --maxclients 20000 --maxmemory 32mb --maxmemory-policy allkeys-lru --loglevel warning
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "100MB"

  nginx:
    image: nginx:1.29.0-alpine
    container_name: nginx
    hostname: nginx
    ports:
      - 9999:9999
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    depends_on:
      - backend-1
      - backend-2
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: "50MB"

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.55.0
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - 9090:9090
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: jaeger
    container_name: jaeger
    restart: always
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 16686:16686
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 4317:4317
      - 5778:5778
      - 4318:4318
      - 9411:9411
    environment:
      - LOG_LEVEL=debug
    networks:
      - backend

  grafana:
    container_name: grafana
    image: grafana/grafana:11.3.0
    restart: unless-stopped
    volumes:
      #- ./grafana/provision:/etc/grafana/provisioning
      - ./grafana.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      - backend
    depends_on:
      - prometheus
      - jaeger
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  #   db:
  #     image: postgres:17-alpine
  #     container_name: payment-db
  #     hostname: db
  #     environment:
  #       - POSTGRES_PASSWORD=rinha25
  #       - POSTGRES_USER=rinha25
  #       - POSTGRES_DB=payments_db
  #     ports:
  #       - "5432:5432"
  #     command: postgres -c max_connections=450 -c shared_buffers=32MB -c effective_cache_size=96MB -c work_mem=3MB -c maintenance_work_mem=12MB -c synchronous_commit=off -c fsync=off
  #     networks:
  #       - backend
  #       - payment-processor
  #     volumes: [pgdata:/var/lib/postgresql/data]
  #     volumes:
  #       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #     #   - pgdata:/var/lib/postgresql/data
  #     deploy:
  #       resources:
  #         limits:
  #           cpus: "0.4"
  #           memory: "100MB"
  
networks:
  backend:
    driver: bridge
  payment-processor:
    external: true

volumes:
  grafana-data:
  prometheus-data:
#   pgdata: {}
